{"version":3,"sources":["pages/Register/styles.js","api/api.request.js","api/axios.js","api/customer.js","components/Countdown/index.js","pages/Register/index.jsx"],"names":["formStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","code","axios","baseUrl","this","queue","baseURL","headers","withCredentials","url","instance","interceptors","request","use","config","Object","keys","length","error","Promise","reject","response","res","destroy","data","status","options","create","mergeOptions","assign","getInsideConfig","pro","createCustomerByEmail","fullName","phone","email","vCode","method","Countdown","seconds","useState","timeLeft","setTimeLeft","useEffect","timer","setInterval","clearInterval","Copyright","Typography","variant","color","align","Date","getFullYear","useStyles","makeStyles","styles","formDefault","RegisterPage","classes","enqueueSnackbar","useSnackbar","handleSnack","txt","setForm","handleInput","e","key","target","value","isSending","setIsSending","validatorRef","useRef","isValidEmail","setIsValidEmail","current","childs","state","isValid","handleGetVCode","a","setTimeout","EMAIL_GAP_SECONDS","message","loading","evidence","setEvidence","handleSubmit","JSON","stringify","Container","component","className","maxWidth","Avatar","onSubmit","ref","Grid","container","item","xs","fullWidth","label","name","autoComplete","autoFocus","onChange","validators","errorMessages","data-testid","sm","size","Button","type","disabled","onClick","Box","mt"],"mappings":"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","file":"static/js/5.47b16efe.chunk.js","sourcesContent":["const formStyles = theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    code: {\n        marginTop: 2,\n    },\n});\nexport default formStyles;\n","import HttpRequest from './axios';\nimport config from '../config/config';\nconst baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;\n\nconst axios = new HttpRequest(baseUrl);\nexport default axios;\n","import axios from 'axios';\nclass HttpRequest {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n        this.queue = {};\n    }\n    getInsideConfig() {\n        const config = {\n            baseURL: this.baseUrl,\n            headers: {},\n            withCredentials: false,\n        };\n        return config;\n    }\n    destroy(url) {\n        delete this.queue[url];\n    }\n    interceptors(instance, url) {\n        instance.interceptors.request.use(\n            config => {\n                if (!Object.keys(this.queue).length) {\n                    // do something before sending requests\n                }\n                this.queue[url] = true;\n                return config;\n            },\n            error => {\n                return Promise.reject(error);\n            }\n        );\n        instance.interceptors.response.use(\n            res => {\n                this.destroy(url);\n                const { data, status } = res;\n                // do something after getting responses\n                return { data, status };\n            },\n            error => {\n                this.destroy(url);\n                return Promise.reject(error.response);\n            }\n        );\n    }\n    request(options) {\n        const instance = axios.create();\n        const mergeOptions = Object.assign(this.getInsideConfig(), options);\n        this.interceptors(instance, mergeOptions.url);\n        return instance(mergeOptions);\n    }\n}\nexport default HttpRequest;\n","import axios from './api.request';\n\n/**\n * get verification code by email\n * */\nexport const getVerificationCodeByEmail = email => {\n    return axios.request({\n        url: '/api/getVerificationCodeByEmail',\n        data: { email },\n        method: 'post',\n    });\n};\n\nexport const createCustomerByEmail = ({ fullName, phone, email, vCode }) => {\n    return axios.request({\n        url: '/api/createCustomerByEmail',\n        data: { fullName, phone, email, vCode },\n        method: 'post',\n    });\n};\n","import React, { useEffect, useState } from 'react';\n\nconst Countdown = ({ seconds }) => {\n    const [timeLeft, setTimeLeft] = useState(seconds);\n    useEffect(() => {\n        if (!timeLeft) return;\n        const timer = setInterval(() => {\n            setTimeLeft(timeLeft - 1);\n        }, 1000);\n        return () => clearInterval(timer);\n    }, [timeLeft]);\n\n    return <>Resend in {timeLeft} s</>;\n};\n\nexport default Countdown;\n","import React, { useState, useRef } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport styles from './styles';\nimport { useEffect } from 'react';\nimport { createCustomerByEmail, getVerificationCodeByEmail } from '../../api/customer';\nimport Countdown from '../../components/Countdown';\nimport { useSnackbar } from 'notistack';\n\nfunction Copyright() {\n    return (\n        <Typography variant='body2' color='textSecondary' align='center'>\n            <span>Created by Sam </span>\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles(styles);\n\nconst EMAIL_GAP_SECONDS = 30;\n\nconst formDefault = {\n    fullName: '',\n    phone: '',\n    email: '',\n    vCode: '',\n};\n\nfunction RegisterPage() {\n    const classes = useStyles();\n\n    // ================================================================================\n    // snackbar\n    // ================================================================================\n    const { enqueueSnackbar } = useSnackbar();\n    const handleSnack = (variant, txt) => enqueueSnackbar(txt, { variant });\n    // ================================================================================\n    // default state and two ways bind function\n    // ================================================================================\n    const [form, setForm] = useState(formDefault);\n    const handleInput = (e, key) => {\n        setForm({\n            ...form,\n            [key]: e.target.value,\n        });\n    };\n\n    // ================================================================================\n    // countdown for getting vCode\n    // ================================================================================\n\n    const [isSending, setIsSending] = useState(false);\n    const emailSleep = () => {\n        setTimeout(() => {\n            setIsSending(false);\n        }, EMAIL_GAP_SECONDS * 1000);\n    };\n    // ================================================================================\n    // To check the email if it is validated for keeping buttons status correct.\n    // ================================================================================\n    const validatorRef = useRef(null);\n    const [isValidEmail, setIsValidEmail] = useState(false);\n\n    useEffect(() => {\n        setIsValidEmail(form.email && validatorRef?.current.childs[2].state.isValid && !isSending);\n    }, [form, isSending]);\n\n    // ================================================================================\n    // To get a vcode\n    // ================================================================================\n    const handleGetVCode = async () => {\n        try {\n            setIsSending(true);\n            const { data } = await getVerificationCodeByEmail(form.email);\n            if (data.status === 200) {\n                emailSleep();\n                handleSnack('success', data.message);\n            } else {\n                handleSnack('warning', data.message);\n                setIsSending(false);\n            }\n        } catch (error) {\n            handleSnack('error', error ?? 'Network error, please try it later!');\n            setIsSending(false);\n        }\n    };\n\n    // ================================================================================\n    // To submit form\n    // ================================================================================\n    let loading = false; // avoide multiple clicking\n    const [evidence, setEvidence] = useState(null);\n    const handleSubmit = async () => {\n        try {\n            if (loading) return;\n            loading = true;\n            const { data } = await createCustomerByEmail(form);\n            if (data.status === 200) {\n                handleSnack('success', data.message);\n                setEvidence(JSON.stringify(data.data));\n            } else {\n                handleSnack('warning', data.message);\n            }\n            loading = false;\n        } catch (error) {\n            handleSnack('error', error ?? 'Network error, please try it later!');\n            loading = false;\n        }\n    };\n\n    return (\n        <Container component='main' className='register-form' maxWidth='xs'>\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component='h1' variant='h5'>\n                    Sign up\n                </Typography>\n                <ValidatorForm className={classes.form} onSubmit={handleSubmit} ref={validatorRef}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextValidator\n                                variant='outlined'\n                                fullWidth\n                                label='FullName'\n                                name='fullName'\n                                autoComplete='fullName'\n                                autoFocus\n                                value={form.fullName}\n                                onChange={e => handleInput(e, 'fullName')}\n                                validators={['required']}\n                                errorMessages={['this field is required']}\n                                data-testid='fullName'\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextValidator\n                                variant='outlined'\n                                fullWidth\n                                label='phone'\n                                name='phone'\n                                autoComplete='phone'\n                                value={form.phone}\n                                onChange={e => handleInput(e, 'phone')}\n                                validators={['required']}\n                                errorMessages={['this field is required']}\n                                data-testid='phone'\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextValidator\n                                variant='outlined'\n                                fullWidth\n                                label='Email Address'\n                                name='email'\n                                value={form.email}\n                                onChange={e => handleInput(e, 'email')}\n                                validators={['required', 'isEmail']}\n                                errorMessages={['this field is required', 'email is not valid']}\n                                data-testid='email'\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextValidator\n                                autoComplete='verification code'\n                                name='vCode'\n                                variant='outlined'\n                                fullWidth\n                                label='Verification code'\n                                size='small'\n                                value={form.vCode}\n                                onChange={e => handleInput(e, 'vCode')}\n                                validators={['required']}\n                                errorMessages={['this field is required']}\n                                data-testid='vCode'\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <Button\n                                type='button'\n                                disabled={!isValidEmail}\n                                fullWidth\n                                variant='contained'\n                                color='secondary'\n                                className={classes.code}\n                                onClick={handleGetVCode}\n                                data-testid='vCodeBtn'>\n                                {isSending ? (\n                                    <Countdown seconds={EMAIL_GAP_SECONDS} />\n                                ) : (\n                                    'Get vCode'\n                                )}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <Button\n                        type='submit'\n                        fullWidth\n                        variant='contained'\n                        color='primary'\n                        className={classes.submit}\n                        data-testid='submitBtn'>\n                        Sign Up\n                    </Button>\n                </ValidatorForm>\n            </div>\n            <Box mt={5}>\n                <Copyright />\n            </Box>\n\n            {!evidence ? null : (\n                <Box mt={5}>\n                    <p>Your information is as follows: </p>\n                    <p>{evidence}</p>\n                </Box>\n            )}\n        </Container>\n    );\n}\n\nexport default RegisterPage;\n"],"sourceRoot":""}